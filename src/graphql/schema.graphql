# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CancelReservationInput {
  reason: String
}

input CreateGameInput {
  ean: String!
  gameUnits: [CreateGameUnitInput!]!
  maxAge: Int
  maxDuration: Int
  maxPlayers: Int!
  minAge: Int!
  minDuration: Int!
  minPlayers: Int!
  publisher: String!
  tags: [String!]
  texts: [CreateTextInput!]!
  title: String!
}

input CreateGameUnitInput {
  inStock: Boolean
  incomplete: Boolean
  texts: [CreateTextInput!]!
  unitShortId: String!
  weight: Float
}

input CreateRentalInput {
  reservationId: String!
}

input CreateReservationInput {
  gameId: String!
  quantity: Int
}

input CreateTextInput {
  key: String!
  lang: String
  value: String
}

input CreateUpdatePickUpDayInput {
  dayOfWeek: WeekDay!
  pickUpTimes: [CreateUpdatePickUpTimeInput!]!
}

input CreateUpdatePickUpTimeInput {
  from: String!
  to: String!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  roleId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type File {
  createdAt: DateTimeISO!
  dataUrl: String!
  fileName: String!
  id: String!
  key: String!
  meta: JSON
  mimeType: String!
  model: String!
  modelId: String!
  path: String!
  size: Float!
  updatedAt: DateTimeISO!
  url: String!
}

"""File scalar type"""
scalar FileScalar

input FilterInput {
  columnAccessor: String!
  operator: FilterOperator!
  type: FilterTypes!
  value: JSON
}

"""Filter operators for datatables"""
enum FilterOperator {
  EQ
  GT
  GTE
  IN
  IS
  IS_NOT_NULL
  IS_NULL
  LIKE
  LT
  LTE
  NEQ
  NIN
  NOT_LIKE
}

"""Filter types for datatables"""
enum FilterTypes {
  BOOLEAN
  DATE
  NUMBER
  SELECT
  STRING
}

type Game {
  availableAt: DateTimeISO
  availableUnits: Int!
  createdAt: DateTimeISO!
  deletedAt: DateTimeISO
  ean: String
  files: [File!]
  gameShortId: Int!
  id: String!
  maxAge: Int
  maxDuration: Int
  maxPlayers: Int
  minAge: Int!
  minDuration: Int
  minPlayers: Int!
  publisher: String!
  tags: [Tag!]!
  texts: JSON!
  title: String!
  units: [GameUnit!]!
  updatedAt: DateTimeISO!
}

type GameUnit {
  available: Boolean!
  createdAt: DateTimeISO!
  game: Game!
  gameId: String!
  id: String!
  inStock: Boolean!
  incomplete: Boolean!
  prefixedShortId: String
  rentals: [Rental!]
  texts: JSON!
  unitShortId: String!
  updatedAt: DateTimeISO!
  weight: Float
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  acceptTerms(terms: [TermsType!]!): Boolean!
  cancelReservation(data: CancelReservationInput, id: String!): Reservation!
  changePassword(data: PasswordChangeInput!): Boolean!
  createGame(data: CreateGameInput!, uploads: [FileScalar!]): Game!
  createRentalsByReservation(data: CreateRentalInput!): [Rental!]!
  createReservation(games: [CreateReservationInput!]!): Reservation!
  createUpdatePickUpDay(data: [CreateUpdatePickUpDayInput!]!): [PickUpDay!]!
  createUser(data: CreateUserInput!): User!
  forgotPassword(email: String!): Boolean!
  importGames(upload: FileScalar!): Boolean!
  login(data: LoginInput!): String!
  returnRental(id: String!): Rental!
  sendDoubleOptInMail(email: String!): Boolean!
  sendDoubleOptInMailToMe: Boolean!
  sendDoubleOptInNewMailToMe: Boolean!
  setPassword(data: SetPasswordInput!): Boolean!
  setReservationPacked(id: String!): Reservation!
  signUp(data: SignUpInput!): Boolean!
  softDeleteGame(id: String!): Game!
  softDeleteUser(id: String!): User!
  updateGame(data: UpdateGameInput!, id: String!, uploads: [FileScalar!]): Game!
  updateMe(data: UpdateMeInput!): User!
  updateRental(data: UpdateRentalInput!, id: String!): Rental!
  updateReservation(data: UpdateReservationInput!, id: String!): Reservation!
  updateUser(data: UpdateUserInput!, id: String!): User!
}

input OrderInput {
  columnAccessor: String!
  direction: String!
}

type PageInfo {
  currentPage: Int!
  perPage: Int!
  totalPages: Int!
}

type PaginatedRentals {
  intitialPaginationDate: DateTimeISO
  nodes: [Rental!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedReservations {
  intitialPaginationDate: DateTimeISO
  nodes: [Reservation!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginatedUsers {
  intitialPaginationDate: DateTimeISO
  nodes: [User!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PaginationGames {
  intitialPaginationDate: DateTimeISO
  nodes: [Game!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input PasswordChangeInput {
  newPassword: String!
  oldPassword: String!
}

type PickUpDay {
  createdAt: DateTimeISO!
  dayOfWeek: WeekDay!
  pickUpTimes: [PickUpTime!]!
  updatedAt: DateTimeISO!
}

type PickUpTime {
  dayOfWeek: WeekDay!
  from: String!
  to: String!
}

type Query {
  game(id: String!): Game!
  games: [Game!]!
  gamesByIds(games: [String!]!): [Game!]!
  gamesPaginated(filterBy: [FilterInput!], limit: Int!, offset: Int!, orderBy: [OrderInput!], search: String): PaginationGames!
  me: User!
  myReservations(status: [ReservationStatus!]): [Reservation!]!
  pickUpDays: [PickUpDay!]!
  rentalsPaginated(filterBy: [FilterInput!], includeAll: Boolean, limit: Int!, offset: Int!, orderBy: [OrderInput!]): PaginatedRentals!
  reservation(id: String!): Reservation
  reservationsPaginated(filterBy: [FilterInput!], includeAll: Boolean, limit: Int!, offset: Int!, orderBy: [OrderInput!]): PaginatedReservations!
  role(id: String!): Role!
  roles: [Role!]!
  tag(id: String!): Tag!
  tags: [Tag!]!
  term(key: TermsType!): Terms!
  terms: [Terms!]!
  user(id: String!): User!
  users: [User!]!
  usersPaginated(filterBy: [FilterInput!], limit: Int!, offset: Int!, orderBy: [OrderInput!]): PaginatedUsers!
}

type Rental {
  bookingId: String
  createdAt: DateTimeISO!
  dueDate: DateTimeISO!
  gameUnit: GameUnit
  gameUnitId: String!
  id: String!
  lastReminder: DateTimeISO
  rentedAt: DateTimeISO!
  reservationId: String
  returnedAt: DateTimeISO
  status: RentalStatus!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

"""The status of a rental"""
enum RentalStatus {
  OVERDUE
  RENTED
  RETURNED
}

type Reservation {
  cancelledAt: DateTimeISO
  createdAt: DateTimeISO!
  gameUnits: [GameUnit!]!
  id: String!
  rentalId: String
  reservationCode: String!
  status: ReservationStatus!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

"""The status of a reservation"""
enum ReservationStatus {
  CANCELLED
  COMPLETED
  PACKED
  PENDING
}

type Role {
  createdAt: DateTimeISO!
  id: String!
  key: String!
  texts: JSON!
  updatedAt: DateTimeISO!
}

input SetPasswordInput {
  optIn: Boolean
  password: String!
  token: String!
}

input SignUpInput {
  birthdate: DateTimeISO!
  city: String!
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  postalCode: String!
  street: String!
  telephone: String!
  termsAccepted: Boolean!
}

type Tag {
  createdAt: DateTimeISO!
  id: String!
  key: String!
  texts: JSON!
  updatedAt: DateTimeISO!
}

type Terms {
  createdAt: DateTimeISO!
  key: TermsType!
  texts: JSON!
  updatedAt: DateTimeISO!
}

"""Type of terms"""
enum TermsType {
  PRIVACY
  TERMS
}

"""Token types for validation tokens"""
enum TokenType {
  NEW_EMAIL
  OPT_IN
  PASSWORD
}

input UpdateGameInput {
  ean: String!
  gameUnits: [CreateGameUnitInput!]
  maxAge: Int
  maxDuration: Int
  maxPlayers: Int
  minAge: Int
  minDuration: Int
  minPlayers: Int
  publisher: String
  tags: [String!]
  texts: [CreateTextInput!]
  title: String
}

input UpdateMeInput {
  birthdate: DateTimeISO
  city: String
  email: String
  firstname: String
  lastname: String
  postalCode: String
  street: String
  telephone: String
}

input UpdateRentalInput {
  dueDate: DateTimeISO!
}

input UpdateReservationInput {
  gameIds: [String!]
}

input UpdateUserInput {
  email: String
  firstname: String
  lastname: String
  roleId: String
}

type User {
  activeToken(type: TokenType!): TokenType
  birthdate: DateTimeISO
  city: String
  createdAt: DateTimeISO!
  deletedAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  firstname: String!
  id: String!
  lastname: String!
  password: String!
  postalCode: String
  role: Role!
  roleId: String!
  street: String
  telephone: String
  updatedAt: DateTimeISO!
}

"""Available pick up days"""
enum WeekDay {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}